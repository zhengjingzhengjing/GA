(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{357:function(e,n,s){"use strict";s.r(n);var v=s(3),t=Object(v.a)({},(function(){var e=this,n=e.$createElement,s=e._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("npm 安装中的 i、-g、--save、--save-dev、-D、-S的区别\n")]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",[e._v("i 是 install 的简写"),s("br"),e._v("\n-g 是全局安装，不带 -g 会安装在个人文件夹"),s("br"),e._v("\n-S 与 --save 的简写，安装包信息会写入 dependencies 中"),s("br"),e._v("\n-D 与 --save-dev 的简写，安装包写入 devDependencies 中")])]),e._v(" "),s("p",[s("strong",[e._v("dependencies 与 devDependencies")])]),e._v(" "),s("p",[e._v("dependencies 生产阶段的依赖,也就是项目运行时的依赖"),s("br"),e._v("\ndevDependencies 开发阶段的依赖，就是我们在开发过程中需要的依赖，只在开发阶段起作用的")]),e._v(" "),s("p",[s("strong",[e._v("举例说明")])]),e._v(" "),s("p",[e._v("你写 ES6 代码，需要 babel 转换成 es5 ，转换完成后，我们只需要转换后的代码，上线的时候，直接把转换后的代码部署到生产环境，不需要 bebal 了，生产环境不需要。这就可以安装到 devDependencies ，再比如说代码提示工具，也可以安装到 devDependencies 。")]),e._v(" "),s("p",[e._v("如果你用了 Element-UI，由于发布到生产后还是依赖 Element-UI，这就可以安装到 dependencies 。")])])}),[],!1,null,null,null);n.default=t.exports}}]);